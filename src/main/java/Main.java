import java.time.Clock;

public class Main {

    public static void main(String[] args) {
        String s = "";
        System.out.println("Hello world!");
        // endswith 이거 많이 쓴다.
        // 메소드들을 까보고 직접 구현해보는게 좋을수도 았다 속도측면애서 데이터
        // c 와 java 랑 다른점은 가비지 컬렉터
        // 라이브러리화 된 매소드들을 빨리 습득하는게 좋다
        // 해시코드 무엇?
        //com.iirtech.study

        /*
        * List, Map,
        * 자바가 업그레이드 돠면서 컬렉션이 추가됨
        * 자바 컬렉션 프레임워크의 상속 기본 구조 그림 보기
        * 인터페이스를 사용하는 이유는 약속과 같은것 >> api 같은 느낌인가?
        *
        *
        * 리스트는 4개로 구분되는데 vector와 arratList 차이 확인 필요
        * 백터는 10개의 길이로 정해져있는데 추가되면 10개씩 늘어난다 동적으로 늘어난다
        * 백터는 동기화 처리가 가능함 array는 동기화 처리가 되지 않음
        * 따라서 멀티 쓰레드 사용시 백터 사용
        *
        * 쓰레드 안전이라는 개념
        *
        * set 해쉬와 소티드가 있음
        * 속도가 굉장히 빠름
        * 해싱은 하나의 문자열을 원래의 것을 코드로 변환해서 속도가 빠르다
        * 벗 해시 충돌들이 일어난다
        * 충돌이 일어나면 해시 테이블을 늘린다
        *
        *
        * list 는 순서 있음 set은 순서없음 해쉬로 이루어져서
        *
        *
        *
        *
        * java hashmap은 어떻게 동작하는가
        * 해시map은 비트 연산자로 계산해서 빠르다
        * 해쉬값은 계속 바뀐다 스트링 숫자에 유리한 해시값들은 다 다들다
        * 자바버전별로 해쉬값은 다 다르다 빠르게 하려면 버전과 타입에 맞는 해쉬값을 찾아보자
        * 백엔드를 하면 가공하거나 변경할 수 도 았다.
        *
        * 구현된 자바 메소드 보는것이 공부하기 좋다
        * 해시맵에 대해서
        *
        * 시리얼라이즈 vo에 대해서 항상 해줘야한다
        * 시리얼아이디가 바뀌면 내용이 업데이트 버전에 대한 증명
        *
        * 해시충돌이 일어날때 로드 팩터를 통해 맵에 대해서 코드가 커짐
        * 데이터의 수를 지정해주면 인서트 속도가 빨라진다
        * 노드
        * 맵에서 가장 핵심구조는 set 구조
        * 키셋으로 이터레이터를 돌려서 순서를 가져온다
        * set보다 맵이 더 빠르다
        *
        * 정적일 경우는 capacity 지정이 더욱 성능이 좋다
        * 로드팩터는 굳이 바꿀 필요가 있나?
        * 상속박아서 바꾼다
        * 상속받어서
        *
        * 해쉬맵으로 처리해야 시간처리가 좋다 포문은 지양하자
        * 리무브 메서드를 통해서 밸류값 리터을 한번더 받을 수 있다.
        *
        * 클리어 메서드는
        *
        * 얕은 복사 깊은 복사
        * 얕은 복사는 서로 연동되어 있다
        * 깊은 복사는 별개의 객체
        *
        * 얕은 복사 하난 생성하고 이퀄로 넣어주는 경우 걍
        *
        *
        *사칙연산 마이너스 숫자도 들어가야함 마이너스 - 면 + 변경
        * 공백처리
        *
        *
        *
        * */
    }
}